(defmacro attributes (used-attributes &rest body)
  `(flet ((html-attribute (name &optional value)
                          (cond ((typep name 'string) (if (typep value 'string)
                                                          (concatenate 'string name "=\"" value "\"")
                                                        (progn (format t "lispylangs/html/attributes/attributes.lisp:~%  html-attribute: `value` must be a string~%~18t`value`: ~s~%" value) nil)))
                                ((typep name 'list) (if (= (list-length name) 2)
                                                        (concatenate 'string (nth 0 name) "=\"" (nth 1 name) "\"")
                                                      (progn (format t "lispylangs/html/attributes/attributes.lisp:~%  html-attribute: `name` must be a 2-element list~%~18t`name`: ~s~%" name) nil)))
                                (t (format t "lispylangs/html/attributes/attributes.lisp:~%  html-attribute: `name` must be a string or a list~%~18t`name`: ~s~%" name) nil))))
     (flet ,(mapcar (lambda
                      (name)
                      `(,(intern (string-upcase name))
                        (value)
                        (html-attribute ,name value)))
                    used-attributes)
       ,@body)))
